service: content-api

useDotenv: true

custom:
  stage: ${opt:stage, 'dev'}
  env: ${lower(${self:custom.stage})}
  layerName: ${self:service}-dependencies-${self:custom.stage}
  vpcSettings:
    prod:
      securityGroupIds:
        - sg-052314a1eec2f2567
      subnetIds:
        - subnet-01a6b61d749d10c46
    staging:
      securityGroupIds:
        - sg-052314a1eec2f2567
      subnetIds:
        - subnet-01a6b61d749d10c46
    demo:
      securityGroupIds:
        - sg-052314a1eec2f2567
      subnetIds:
        - subnet-01a6b61d749d10c46
    current: ${self:custom.vpcSettings.${self:custom.env}, ''}

provider:
  name: aws
  runtime: nodejs20.x
  memorySize: 1024 # Keep 1024MB for media processing
  timeout: 30 # Reduced from 300 seconds for cost optimization
  region: us-east-2
  stage: ${self:custom.stage}
  iam:
    role: arn:aws:iam::428019619026:role/ChurchAppsRole
  environment:
    APP_ENV: ${self:custom.env}

package:
  individually: true
  patterns:
    - "dist/**"
    - "lambda.js"
    - "package.json"
    - "!node_modules/**"
    - "!src/**"
    - "!tools/**"
    - "!.git/**"
    - "!.gitignore"
    - "!README.md"
    - "!*.md"

layers:
  dependencies:
    name: ${self:custom.layerName}
    path: layer
    retain: false

functions:
  api:
    name: content-api-${self:custom.stage}-api
    handler: lambda.universal
    layers:
      - { Ref: DependenciesLambdaLayer }
    events:
      - http:
          path: /{proxy+}
          method: ANY
      - http:
          path: /
          method: ANY
    vpc: ${self:custom.vpcSettings.current}
    package:
      patterns:
        - "!node_modules/**"
        - "!package-lock.json"
        - "!tsconfig.json"
        - "!src/**"
        - "!tools/**"
        - "!*.md"
        - "!Dockerfile"
        - "!.git/**"
        - "!.gitignore"
        - "!README.md"
  nightly:
    name: content-api-${self:custom.stage}-nightly
    handler: lambda.nightly
    memorySize: 512 # Reduced from 1024MB for cost optimization
    timeout: 120 # Reduced from 300 seconds
    layers:
      - { Ref: DependenciesLambdaLayer }
    events:
      - schedule:
          rate: cron(0 0 * * ? *)
          enabled: true
    vpc: ${self:custom.vpcSettings.current}
    package:
      patterns:
        - "!node_modules/**"
        - "!package-lock.json"
        - "!tsconfig.json"
        - "!src/**"
        - "!tools/**"
        - "!*.md"
        - "!Dockerfile"
        - "!.git/**"
        - "!.gitignore"
        - "!README.md"
  timer2Monday:
    name: content-api-${self:custom.stage}-timer2Monday
    handler: lambda.timer2Monday
    memorySize: 256 # Reduced from 1024MB for lightweight timer
    timeout: 60 # Reduced from 300 seconds
    layers:
      - { Ref: DependenciesLambdaLayer }
    events:
      - schedule:
          rate: cron(0 2 ? * MON *)
          enabled: true
    vpc: ${self:custom.vpcSettings.current}
    package:
      patterns:
        - "!node_modules/**"
        - "!package-lock.json"
        - "!tsconfig.json"
        - "!src/**"
        - "!tools/**"
        - "!*.md"
        - "!Dockerfile"
        - "!.git/**"
        - "!.gitignore"
        - "!README.md"

plugins:
  - serverless-plugin-utils
